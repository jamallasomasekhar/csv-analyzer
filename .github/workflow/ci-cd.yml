name: CSV Analyzer CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      
    - name: Terraform Format
      run: terraform fmt -check
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
      
  test-python:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest boto3 pandas flask
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
  deploy:
    needs: [terraform-validate, test-python]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Get EC2 public IP
      id: get-ec2-ip
      run: |
        # Get EC2 public IP from AWS using the instance name tag
        # Replace with your actual method to get the EC2 IP
        EC2_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=csv-analyzer-backend-server" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        echo "EC2_IP=$EC2_IP" >> $GITHUB_OUTPUT
    
    - name: Deploy Frontend to S3
      run: |
        # Get S3 bucket name from AWS using the bucket name tag or use predefined value
        S3_BUCKET=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'csv-analyzer-frontend')].Name" --output text || echo "csv-analyzer-frontend-files")
        
        # Update API URL in index.html with actual EC2 IP
        sed -i "s|BACKEND_SERVER_IP|$EC2_IP|g" frontend/index.html
        
        # Sync frontend files to S3
        aws s3 sync frontend/ s3://$S3_BUCKET/ --delete
        
        echo "Frontend deployed to S3 bucket: $S3_BUCKET"
    
    - name: Deploy Backend to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.EC2_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "backend/app.py"
        target: "/tmp"
        
    - name: Update and Restart Backend Service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_IP }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo /opt/deployment/update_backend.sh
          echo "Backend updated and service restarted"